package components

import (
	"github.com/axzilla/templui/utils"
	"strconv"
)

type TextareaProps struct {
	ID          string
	Class       string
	Attributes  templ.Attributes
	Name        string
	Value       string
	Placeholder string
	Rows        int
	Disabled    bool
	Required    bool
	AutoResize  bool
}

templ Textarea(props ...TextareaProps) {
	{{ var p TextareaProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	if p.ID == "" {
		{{ p.ID = utils.RandomID() }}
	}
	<textarea
		x-ref={ p.ID }
		id={ p.ID }
		if p.Name != "" {
			name={ p.Name }
		}
		if p.Placeholder != "" {
			placeholder={ p.Placeholder }
		}
		if p.Rows > 0 {
			rows={ strconv.Itoa(p.Rows) }
		}
		disabled?={ p.Disabled }
		required?={ p.Required }
		class={
			utils.TwMerge(
				"flex w-full px-3 py-2",
				"min-h-[80px]",
				"rounded-md border border-input bg-background text-sm",
				"ring-offset-background",
				"placeholder:text-muted-foreground",
				"focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
				"disabled:cursor-not-allowed disabled:opacity-50",
				p.Class,
			),
		}
		if p.AutoResize {
			x-data="textarea"
			x-init="resize"
			@input="resize"
		}
		{ p.Attributes... }
	>{ p.Value }</textarea>
}

templ TextareaScript() {
	{{ handle := templ.NewOnceHandle() }}
	@handle.Once() {
		<script defer nonce={ templ.GetNonce(ctx) }>
			document.addEventListener('alpine:init', () => {
				Alpine.data('textarea', () => ({
					resize() {
						this.$el.style.height = '80px';
						this.$el.style.height = this.$el.scrollHeight + 'px';
					}
				}));
			});
		</script>
	}
}
