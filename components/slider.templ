package components

import (
	"fmt"
	"github.com/axzilla/templui/utils"
)

type SliderProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	Name       string
	Min        int
	Max        int
	Step       int
	Value      int
	Disabled   bool
}

type SliderValueProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	For        string
}

templ Slider(props ...SliderProps) {
	{{ var p SliderProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID + "-container" }
		}
		class={ utils.TwMerge("w-full", p.Class) }
		data-slider
		data-slider-id={ p.ID }
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ SliderInput(props ...SliderProps) {
	{{ var p SliderProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<input
		type="range"
		id={ p.ID }
		if p.Name != "" {
			name={ p.Name }
		}
		if p.Value != 0 {
			value={ fmt.Sprintf("%d", p.Value) }
		}
		if p.Min != 0 {
			min={ fmt.Sprintf("%d", p.Min) }
		}
		if p.Max != 0 {
			max={ fmt.Sprintf("%d", p.Max) }
		}
		if p.Step != 0 {
			step={ fmt.Sprintf("%d", p.Step) }
		}
		class={
			utils.TwMerge(
				"w-full h-2 rounded-full bg-secondary appearance-none cursor-pointer",
				"focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
				"[&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:w-4 [&::-webkit-slider-thumb]:h-4",
				"[&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-primary",
				"[&::-webkit-slider-thumb]:hover:bg-primary/90",
				"[&::-moz-range-thumb]:w-4 [&::-moz-range-thumb]:h-4 [&::-moz-range-thumb]:border-0",
				"[&::-moz-range-thumb]:rounded-full [&::-moz-range-thumb]:bg-primary",
				"[&::-moz-range-thumb]:hover:bg-primary/90",
				"disabled:opacity-50 disabled:cursor-not-allowed",
				p.Class,
			),
		}
		disabled?={ p.Disabled }
		{ p.Attributes... }
	/>
}

templ SliderValue(props ...SliderValueProps) {
	{{ var p SliderValueProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<span
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge("text-sm text-muted-foreground", p.Class) }
		data-slider-value-for={ p.For }
		{ p.Attributes... }
	></span>
}

templ SliderScript() {
	{{ handler := templ.NewOnceHandle() }}
	@handler.Once() {
		<script defer nonce={ templ.GetNonce(ctx) }>
			document.addEventListener('DOMContentLoaded', () => {
				const sliders = document.querySelectorAll('[data-slider]');
				
				sliders.forEach(slider => {
					const sliderId = slider.dataset.sliderId;
					const input = slider.querySelector('input[type="range"]');
					const valueElements = document.querySelectorAll(`[data-slider-value-for="${sliderId}"]`);
					
					if (input) {
						// Initial Setup
						valueElements.forEach(el => {
							el.textContent = input.value;
						});
						
						// Event Listener
						input.addEventListener('input', () => {
							valueElements.forEach(el => {
								el.textContent = input.value;
							});
						});
					}
				});
			});
		</script>
	}
}
