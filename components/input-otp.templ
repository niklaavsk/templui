package components

import (
	"github.com/axzilla/templui/utils"
	"strconv"
)

type InputOTPProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	Value      string
	Required   bool
	Name       string
	HasError   bool
}

type InputOTPGroupProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type InputOTPSlotProps struct {
	ID          string
	Class       string
	Attributes  templ.Attributes
	Index       int
	Type        string
	Placeholder string
	Disabled    bool
}

type InputOTPSeparatorProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

templ InputOTP(props ...InputOTPProps) {
	{{ var p InputOTPProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID + "-container" }
		}
		if p.Value != "" {
			data-value={ p.Value }
		}
		class={
			utils.TwMerge(
				"flex flex-row items-center gap-2 w-fit",
				p.Class,
			),
		}
		x-data="inputOTP"
		x-on:paste.prevent="handlePaste"
		{ p.Attributes... }
	>
		<input
			type="hidden"
			if p.ID != "" {
				id={ p.ID }
			}
			if p.Name != "" {
				name={ p.Name }
			}
			x-model="otpValue"
			required?={ p.Required }
		/>
		{ children... }
	</div>
}

templ InputOTPGroup(props ...InputOTPGroupProps) {
	{{ var p InputOTPGroupProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			utils.TwMerge(
				"flex gap-2",
				p.Class,
			),
		}
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ InputOTPSlot(props ...InputOTPSlotProps) {
	{{ var p InputOTPSlotProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	if p.Type == "" {
		{{ p.Type = "text" }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		data-slot
		class="relative"
		{ p.Attributes... }
	>
		<input
			x-ref={ "otpDigit" + strconv.Itoa(p.Index) }
			type={ p.Type }
			inputmode="numeric"
			if p.Placeholder != "" {
				placeholder={ p.Placeholder }
			}
			maxlength="1"
			class={
				utils.TwMerge(
					"w-10 h-12 text-center",
					"rounded-md border border-input bg-background text-sm",
					"file:border-0 file:bg-transparent file:text-sm file:font-medium",
					"placeholder:text-muted-foreground",
					"focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
					"disabled:cursor-not-allowed disabled:opacity-50",
					p.Class,
				),
			}
			disabled?={ p.Disabled }
			data-input-index={ strconv.Itoa(p.Index) }
			x-on:input="handleInput"
			x-on:keydown="handleKeydown"
		/>
	</div>
}

templ InputOTPSeparator(props ...InputOTPSeparatorProps) {
	{{ var p InputOTPSeparatorProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			utils.TwMerge(
				"flex items-center text-muted-foreground text-xl",
				p.Class,
			),
		}
		{ p.Attributes... }
	>
		<span>-</span>
	</div>
}

templ InputOTPScript() {
	{{ handle := templ.NewOnceHandle() }}
	@handle.Once() {
		<script defer nonce={ templ.GetNonce(ctx) }>
			document.addEventListener('alpine:init', () => {
				Alpine.data('inputOTP', () => ({
					otpValue: '',
					inputRefs: [],
					
					init() {
						// Initialize on first load
						this.$nextTick(() => {
							if (this.$el.dataset.value) {
								this.otpValue = this.$el.dataset.value;
								this.fillInputsFromValue();
							}
						});
					},
					
					getInputRefs() {
						// Use Alpine's magic $refs
						const refs = this.$refs;
						const inputs = [];
						
						// Loop through all potential refs
						for (let i = 0; i < 20; i++) { // Assuming max 20 digits
							const refName = `otpDigit${i}`;
							if (refs[refName]) {
								inputs.push(refs[refName]);
							}
						}
						
						this.inputRefs = inputs;
						return inputs;
					},
					
					focusFirstEmptyInput() {
						const inputs = this.getInputRefs();
						for (let i = 0; i < inputs.length; i++) {
							if (!inputs[i].value) {
								inputs[i].focus();
								break;
							}
						}
					},
					
					fillInputsFromValue() {
						const inputs = this.getInputRefs();
						const valueStr = this.otpValue.toString();
						
						for (let i = 0; i < inputs.length; i++) {
							if (i < valueStr.length) {
								inputs[i].value = valueStr[i];
							} else {
								inputs[i].value = '';
							}
						}
					},
					
					updateValue() {
						const inputs = this.getInputRefs();
						let value = '';
						
						for (let i = 0; i < inputs.length; i++) {
							value += inputs[i].value || '';
						}
						
						this.otpValue = value;
					},
					
					handleInput(event) {
						const input = event.target;
						const index = parseInt(input.dataset.inputIndex || 0);
						const inputs = this.getInputRefs();
						
						if (input.value.length > 1) {
							input.value = input.value.slice(-1);
						}
						
						if (input.value && index < inputs.length - 1) {
							inputs[index + 1].focus();
						}
						
						this.updateValue();
					},
					
					handleKeydown(event) {
						const input = event.target;
						const index = parseInt(input.dataset.inputIndex || 0);
						const inputs = this.getInputRefs();
						
						if (event.key === 'Backspace') {
							if (!input.value && index > 0) {
								inputs[index - 1].focus();
								inputs[index - 1].value = '';
								event.preventDefault();
							}
						}
						
						if (event.key === 'ArrowLeft' && index > 0) {
							inputs[index - 1].focus();
							event.preventDefault();
						}
						
						if (event.key === 'ArrowRight' && index < inputs.length - 1) {
							inputs[index + 1].focus();
							event.preventDefault();
						}
						
						this.updateValue();
					},
					
					handlePaste(event) {
						event.preventDefault();
						const inputs = this.getInputRefs();
						
						const pastedData = (event.clipboardData || window.clipboardData).getData('text');
						const pastedChars = pastedData.trim().split('');
						
						for (let i = 0; i < inputs.length && i < pastedChars.length; i++) {
							inputs[i].value = pastedChars[i];
						}
						
						this.focusFirstEmptyInput();
						this.updateValue();
					}
				}));
			});
		</script>
	}
}
