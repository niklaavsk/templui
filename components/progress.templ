package components

import (
	"fmt"
	"github.com/axzilla/templui/utils"
)

type ProgressSize string
type ProgressVariant string

const (
	ProgressSizeDefault ProgressSize = ""
	ProgressSizeSm      ProgressSize = "sm"
	ProgressSizeLg      ProgressSize = "lg"
)

const (
	ProgressVariantDefault ProgressVariant = "default"
	ProgressVariantSuccess ProgressVariant = "success"
	ProgressVariantDanger  ProgressVariant = "danger"
	ProgressVariantWarning ProgressVariant = "warning"
)

type ProgressProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	Max        int
	Value      int
	Label      string
	ShowValue  bool
	Size       ProgressSize
	Variant    ProgressVariant
	BarClass   string
	HxGet      string
	HxTrigger  string
	HxTarget   string
	HxSwap     string
}

templ Progress(props ...ProgressProps) {
	{{ var p ProgressProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	if p.ID == "" {
		{{ p.ID = utils.RandomID() }}
	}
	<div
		id={ p.ID }
		class={ utils.TwMerge("w-full", p.Class) }
		if p.HxGet != "" {
			hx-get={ p.HxGet }
		}
		if p.HxTrigger != "" {
			hx-trigger={ p.HxTrigger }
		}
		if p.HxTarget != "" {
			hx-target={ p.HxTarget }
		}
		if p.HxSwap != "" {
			hx-swap={ p.HxSwap }
		}
		aria-valuemin="0"
		aria-valuemax={ fmt.Sprintf("%d", getMaxValue(p.Max)) }
		aria-valuenow={ fmt.Sprintf("%d", p.Value) }
		role="progressbar"
		{ p.Attributes... }
	>
		if p.Label != "" || p.ShowValue {
			<div class="flex justify-between items-center mb-1">
				if p.Label != "" {
					<span class="text-sm font-medium">{ p.Label }</span>
				}
				if p.ShowValue {
					<span class="text-sm font-medium">
						{ fmt.Sprintf("%d%%", getProgressPercentage(p.Value, p)) }
					</span>
				}
			</div>
		}
		<div class="w-full overflow-hidden rounded-full bg-secondary">
			<div
				class={
					utils.TwMerge(
						"h-full rounded-full transition-all",
						getProgressSizeClasses(p.Size),
						getProgressVariantClasses(p.Variant),
						p.BarClass,
					),
				}
				style={ fmt.Sprintf("width: %d%%", getProgressPercentage(p.Value, p)) }
			></div>
		</div>
	</div>
}

func getMaxValue(max int) int {
	if max <= 0 {
		return 100
	}
	return max
}

func getProgressPercentage(value int, props ProgressProps) int {
	max := getMaxValue(props.Max)
	if value < 0 {
		value = 0
	}
	if value > max {
		value = max
	}
	return (value * 100) / max
}

func getProgressSizeClasses(size ProgressSize) string {
	switch size {
	case ProgressSizeSm:
		return "h-1"
	case ProgressSizeLg:
		return "h-4"
	default:
		return "h-2.5"
	}
}

func getProgressVariantClasses(variant ProgressVariant) string {
	switch variant {
	case ProgressVariantSuccess:
		return "bg-green-500"
	case ProgressVariantDanger:
		return "bg-destructive"
	case ProgressVariantWarning:
		return "bg-yellow-500"
	default:
		return "bg-primary"
	}
}
