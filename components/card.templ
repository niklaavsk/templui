package components

import "github.com/axzilla/templui/utils"

type CardMediaPosition string
type CardMediaWidth string

const (
	CardMediaTop    CardMediaPosition = "top"
	CardMediaBottom CardMediaPosition = "bottom"
	CardMediaLeft   CardMediaPosition = "left"
	CardMediaRight  CardMediaPosition = "right"
)

const (
	CardMediaWidthAuto          CardMediaWidth = "auto"
	CardMediaWidthFull          CardMediaWidth = "full"
	CardMediaWidthHalf          CardMediaWidth = "half"
	CardMediaWidthThird         CardMediaWidth = "third"
	CardMediaWidthQuarter       CardMediaWidth = "quarter"
	CardMediaWidthTwoThirds     CardMediaWidth = "two-thirds"
	CardMediaWidthThreeQuarters CardMediaWidth = "three-quarters"
)

type CardProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type CardHeaderProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type CardTitleProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type CardDescriptionProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type CardContentProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type CardFooterProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type CardHorizontalProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type CardMediaProps struct {
	ID          string
	Class       string
	Attributes  templ.Attributes
	Src         string
	Alt         string
	Position    CardMediaPosition
	Width       CardMediaWidth
	AspectRatio AspectRatioVariant
}

templ Card(props ...CardProps) {
	{{ var p CardProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			utils.TwMerge(
				"w-full rounded-lg border bg-card text-card-foreground shadow-xs",
				p.Class,
			),
		}
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ CardHeader(props ...CardHeaderProps) {
	{{ var p CardHeaderProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			utils.TwMerge(
				"flex flex-col space-y-1.5 p-6 pb-0",
				p.Class,
			),
		}
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ CardTitle(props ...CardTitleProps) {
	{{ var p CardTitleProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<h3
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			utils.TwMerge(
				"text-lg font-semibold leading-none tracking-tight",
				p.Class,
			),
		}
		{ p.Attributes... }
	>
		{ children... }
	</h3>
}

templ CardDescription(props ...CardDescriptionProps) {
	{{ var p CardDescriptionProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<p
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			utils.TwMerge(
				"text-sm text-muted-foreground",
				p.Class,
			),
		}
		{ p.Attributes... }
	>
		{ children... }
	</p>
}

templ CardContent(props ...CardContentProps) {
	{{ var p CardContentProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			utils.TwMerge(
				"p-6",
				p.Class,
			),
		}
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ CardFooter(props ...CardFooterProps) {
	{{ var p CardFooterProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			utils.TwMerge(
				"flex items-center p-6 pt-0",
				p.Class,
			),
		}
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ CardHorizontal(props ...CardHorizontalProps) {
	{{ var p CardHorizontalProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			utils.TwMerge(
				"flex overflow-hidden",
				p.Class,
			),
		}
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ CardMedia(props ...CardMediaProps) {
	{{ var p CardMediaProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			utils.TwMerge(
				"overflow-hidden",
				getCardMediaPositionClasses(p.Position, p.Width),
				p.Class,
			),
		}
		{ p.Attributes... }
	>
		@AspectRatio(AspectRatioProps{
			ID:    p.ID + "-aspect",
			Ratio: p.AspectRatio,
			Class: "h-full w-full",
		}) {
			<img
				if p.Src != "" {
					src={ p.Src }
				}
				if p.Alt != "" {
					alt={ p.Alt }
				}
				class="h-full w-full object-cover"
			/>
		}
	</div>
}

func getCardMediaPositionClasses(position CardMediaPosition, width CardMediaWidth) string {
	var positionClass string

	switch position {
	case CardMediaTop:
		return "w-full rounded-t-lg"
	case CardMediaBottom:
		return "w-full rounded-b-lg"
	case CardMediaLeft:
		positionClass = "shrink-0 rounded-l-lg"
	case CardMediaRight:
		positionClass = "shrink-0 rounded-r-lg"
	default:
		positionClass = ""
	}

	if position == CardMediaLeft || position == CardMediaRight {
		return positionClass + " " + getWidthClass(width)
	}

	return positionClass
}

func getWidthClass(width CardMediaWidth) string {
	switch width {
	case CardMediaWidthFull:
		return "w-full"
	case CardMediaWidthHalf:
		return "w-1/2"
	case CardMediaWidthThird:
		return "w-1/3"
	case CardMediaWidthQuarter:
		return "w-1/4"
	case CardMediaWidthTwoThirds:
		return "w-2/3"
	case CardMediaWidthThreeQuarters:
		return "w-3/4"
	default:
		return "w-1/3"
	}
}
