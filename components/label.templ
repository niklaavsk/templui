package components

import "github.com/axzilla/templui/utils"

type LabelProps struct {
	ID            string
	Class         string
	Attributes    templ.Attributes
	For           string
	Error         string
	DisabledClass string
}

templ Label(props ...LabelProps) {
	{{ var p LabelProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<label
		if p.ID != "" {
			id={ p.ID }
		}
		if p.For != "" {
			for={ p.For }
		}
		class={
			utils.TwMerge(
				"text-sm font-medium leading-none inline-block",
				utils.If(len(p.Error) > 0, "text-destructive"),
				p.Class,
			),
		}
		if p.DisabledClass != "" {
			data-disabled-style={ p.DisabledClass }
		} else {
			data-disabled-style="opacity-50 cursor-not-allowed"
		}
		{ p.Attributes... }
	>
		{ children... }
	</label>
}

templ LabelScript() {
	{{ handle := templ.NewOnceHandle() }}
	@handle.Once() {
		<script defer nonce={ templ.GetNonce(ctx) }>
			document.addEventListener('DOMContentLoaded', function() {
				function updateLabelStyles() {
					// Find all labels that are connected to form elements
					document.querySelectorAll('label[for]').forEach(function(label) {
						const forId = label.getAttribute('for');
						const element = document.getElementById(forId);
						
						if (element && element.disabled) {
							// Element is disabled, apply disabled style
							const disabledStyle = label.getAttribute('data-disabled-style') || 'opacity-50 cursor-not-allowed';
							
							// Add classes from disabled style
							disabledStyle.split(' ').forEach(function(className) {
								if (className) {
									label.classList.add(className);
								}
							});
						} else {
							// Element is not disabled, remove disabled style
							const disabledStyle = label.getAttribute('data-disabled-style') || 'opacity-50 cursor-not-allowed';
							
							// Remove classes from disabled style
							disabledStyle.split(' ').forEach(function(className) {
								if (className) {
									label.classList.remove(className);
								}
							});
						}
					});
				}
				
				// Run once on load
				updateLabelStyles();
				
				// Set up mutation observer to watch for disabled attribute changes
				const observer = new MutationObserver(function(mutations) {
					mutations.forEach(function(mutation) {
						if (mutation.type === 'attributes' && mutation.attributeName === 'disabled') {
							updateLabelStyles();
						}
					});
				});
				
				// Observe all form elements for disabled attribute changes
				document.querySelectorAll('input, select, textarea, button').forEach(function(element) {
					observer.observe(element, { attributes: true });
				});
				
				// Also update on any change events in the form
				document.addEventListener('change', updateLabelStyles);
			});
		</script>
	}
}
